[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with Visualization in ggplot2",
    "section": "",
    "text": "Introduction\nVisualization is an important aspect of data science because it can reveal patterns that are not immediately obvious in raw data, and it can be used to effectively communicate about data. However, approaches to data visualization are not always taught systematically, and the language of visualization is not necessarily intuitive.\nThis lab is focused on introducing a systematic approach to visualization using a “grammar of graphics”. In this lab you will:\n\nunderstand the “grammar of graphics” approach and how it is implemented in the ggplot2 package\nlook at how to plot combinations of categorical and numerical data as amounts, distributions, and relationships using bar charts, histograms, boxplots, and scattterplots.\nlearn how to use aesthetic mapping to look at multiple variables in the same graph.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "01_UsingGrammar.html",
    "href": "01_UsingGrammar.html",
    "title": "1  A Grammar of Graphics",
    "section": "",
    "text": "How ggplot2 works with the grammar of graphics\nLeland Wilkinson1 developed the concept of a grammar of graphics by considering the components of a graphic to be like the syntax of language. Wilkinson’s general thesis was that there is a flow of information from data to graphic that can be applied regardless of the makeup of the data or the type of graph being used. Graphics, like sentences, only make sense when the parts articulate with one another.\nHave a look at this graph:\nThis is a reproduction of a well-known graph produced by Gapminder, an organization aimed at using data to dispel misinformation using fact-based data visualizations. This graph is an example of a scatterplot, showing the relationship between two variables: a nation’s gross domestic product (GDP) and its life expectancy. There is also additional information being conveyed about the nations being illustrated: the region of the world to which they belong, and their population size. From the graph, we can see a few patterns:\nThere are some rules governing how the data is displayed, but, like the rules of grammar, these are not necessarily intuitive to someone who hasn’t spent their life exposed to them. It’s sometimes easier to think of ways to break these rules in order to demonstrate their operation:\nThe answer to these questions is the same: the graph would make less sense in terms of what it is trying to communicate. The graphic is an object that is made to be understood by an audience, and as such requires a clear flow from the data to its representation on the page or screen. In R, that flow exists as a mapping between the stored data and graphical elements.\nThe ggplot2 package (part of the tidyverse family of packages) was designed around the grammar of graphics concept. In particular, it treats elements of the plot as layers that can be added to the graphic and connect to the data by mapping ‘aesthetics’ (shortened to aes in the code). The principal components onto which the data are mapped are the graphic elements that represent them, which are termed the geometries (or geom).\nIf this sounds a little philosophical, that’s OK. At this stage it’s a pretty abstract thing to consider. It’s probably a good idea to see how it works in practice.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>A Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "01_UsingGrammar.html#footnotes",
    "href": "01_UsingGrammar.html#footnotes",
    "title": "1  A Grammar of Graphics",
    "section": "",
    "text": "Wilkinson, Leland. 2005. The Grammar of Graphics. Chicago: Springer Science & Business Media. https://books.google.com/books?id=_kRX4LoFfGQC&source=gbs_similarbooks↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>A Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "05_Relationships.html",
    "href": "05_Relationships.html",
    "title": "4  Scatterplots",
    "section": "",
    "text": "Scatterplots are used to visualize relationships between two numerical variables, mapped to the x-position and y-position. We’ve seen scatterplots before in both Base R and ggplot2. You’ll remember that we use the geom_point function to create one:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp))+\n  geom_point()\n\n\n\n\n\n\n\n\nThis is an interesting distribution, and aligns with what we saw in the first Gapminder plot. Most of the countries with lower life expectancy are at the lower end of the GDP spectrum, while higher GDP is associated exclusively with higher life expectancy. To make this line up even better with the original, we can color the points based on their continental groups:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent))+\n  geom_point()\n\n\n\n\n\n\n\n\nThen we can map population (pop) on to the size of the points:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent,size=pop))+\n  geom_point()\n\n\n\n\n\n\n\n\nFinally, if you look closely at the original graph, you can see that the GDP values on the x-axis are not plotted on a linear scale, but instead follow a logarithmic scale, which are useful for displaying data where many of the points are crowded at one end (see an example here). We can do the same by adding another layer on to our ggplot call, this time using the scale_x_log10 function:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent,size=pop))+\n  geom_point() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\nNote the graph looks different, but the process doesn’t change the actual values of the data, only how they are displayed along the x-position. There is a corresponding scale_y_log10 function as well if we wanted to modify the y-axis, but in this case we shouldn’t need to. We’ll deal more with scales in a later section, particularly logarithms, but keep these in mind as you look at graphics going forward.\n\nModifying labels\nFinally, if we wanted to modify, we can add these as additional layers, using terms we remember from Base R:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent,size=pop))+\n  geom_point() +\n  scale_x_log10() +\n  xlab(\"Life Expectancy in Years\") +\n  ylab(\"Per Capita GDP\") \n\n\n\n\n\n\n\n\nOr you can access all of them in a single go using the lab function. I prefer this method since it corresponds to the aesthetic mapping nicely:\n\nggplot(data=gm2007,aes(x=gdpPercap,y=lifeExp,color=continent,size=pop))+\n  geom_point() +\n  scale_x_log10() +\n  labs(x=\"Life Expectancy in Years\", y=\"Per Capita GDP\",color=\"Continent\",size=\"Population\") \n\n\n\n\n\n\n\n\nThere’s a lot more to be done with ggplot2, but hopefully by now you’re starting to see how it all works in terms of a series of layers. If you’re feeling a bit overwhelmed, don’t stress! This is still early days in our journey. We’ll come back to these concepts several more times over the remainder of the course.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nTry plotting some of the numerical relationships among the penguin data using scatterplots. Things you might try are:\n\nFlipper length and body mass\nBill length and body mass\nBill length and bill depth, colored by species\n\n\n\nOnce you’re ready, head over to the Lab Exercise…",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualizing relationships</span>"
    ]
  },
  {
    "objectID": "02_Amounts.html",
    "href": "02_Amounts.html",
    "title": "2  Visualizing Amounts and Proportions",
    "section": "",
    "text": "Mapping to geom_bar\nOne of the most common forms of data we might deal with are amounts, or counts of things. This might include counts of species observed in a meadow; the frequencies of ; or the number of pollution violations recorded in different counties. In this section, we’ll explore how to use bar plots in order to illustrate how we can apply the Grammar of Graphics to amounts data through ggplot2.\nIn addition to loading the necessary packages, let’s get a new dataset. We can access the data from the Gapminder plot as a package in R:\nlibrary(datasets)\nlibrary(tidyverse)\n#install.packages(\"gapminder\")\nlibrary(gapminder)\nRemoving the # at the front will allow you to install this package (I have it here because I already have it installed). This will add the dataset as a tibble called gapminder:\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\nWe have a few different variables to work with in this dataset, including:\nLet’s use some of this to make a bar plot. First, we can try using the year of recording as a categorical variable:\nggplot(data=gapminder,mapping=aes(x=year)) + \n  geom_bar()\nHmmm… all of the bars are exactly the same. This is because the function is counting the number of instances of each year in the dataset. Since the same number of countries are recorded for each year, this means the bar plot will just be the number of countries (142) for each year. What if we used country?\nggplot(data=gapminder,mapping=aes(x=country)) + \n  geom_bar()\nAck! Not only is this uninformative (countries are recorded over the same 12 years), but there’s too many countries to plot on the x-axis. Let’s try again but with continents:\nggplot(data=gapminder,mapping=aes(x=continent)) + \n  geom_bar()\nThis makes a bit more sense. We can see there are more instances of “Africa” than, say, “Americas”, which makes sense: there are more countries in Africa than in the Americas. However, if we look at the left, the counts are a pretty high estimate for number of countries. This is because for each continent, it is counting each country for each year (12) in the dataset.\nLet’s say we just wanted to look at the data from the most recent year in the dataset. First, we need to figure out what that year was. We can use the max function to get this information:\nmax(gapminder$year)\n\n[1] 2007\nThis function just takes a vector and gives the maximum value. So the most recent data here is from 2007. If we just want the data from that year, we can use the square brackets ([]) to subset the data to just the rows from 2007. We’ll create a new variable called gm2007:\ngm2007&lt;-gapminder[gapminder$year==2007,]\nRemember that inside the square brackets, what comes left of the comma refers to rows, and what comes right refers to columns. So this code is effectively saying “give me all the rows in the gapminder tibble where the value in the year column is equal to 2007.” We’ve assigned it to a new object called gm2007. Now, when we look:\ngm2007\n\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\nGreat, with only 142 rows, we can be confident that we now have only one year’s worth of data. When we make a bar plot:\nggplot(data=gm2007,mapping=aes(x=continent)) + \n  geom_bar()\nThe numbers on the y-axis look a lot more reasonable. Now each bar is reflecting the number of countries in each continental grouping.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualizing Amounts and Proportions</span>"
    ]
  },
  {
    "objectID": "02_Amounts.html#try-it-yourself-1",
    "href": "02_Amounts.html#try-it-yourself-1",
    "title": "2  Visualizing Amounts and Proportions",
    "section": "Try it yourself!",
    "text": "Try it yourself!\n\n\n\n\n\n\nTip\n\n\n\nWith the penguinData data, try the following:\n\nPlot the counts per island broken down by sex\nPlot the counts per species, broken down by island\nPlot the counts per island, broken down by year of observation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualizing Amounts and Proportions</span>"
    ]
  },
  {
    "objectID": "02_Amounts.html#visualizing-proportions",
    "href": "02_Amounts.html#visualizing-proportions",
    "title": "2  Visualizing Amounts and Proportions",
    "section": "Visualizing Proportions",
    "text": "Visualizing Proportions\nSometimes, we may want to visualize our counts as proportions. Here, we are comparing counts in categorical groups based on their relationship to the population as a whole (percentage of a total) rather than their absolute numbers.\nIn the case of the visualization we created of penguin species breakdown by island, rather than the specific numbers of each species, we may instead want to compare their relative proportions on each island. To do this, we can add an argument position=\"fill\" to the geom_bar function:\n\nggplot(data=penguinData,mapping=aes(x=island,fill=species)) +   \n  geom_bar(position=\"fill\")\n\n\n\n\n\n\n\n\nWhile it seems like this should be related to fill color, the “fill” here only indicates that the bar should “fill” the space. There are additional options for the position argument that would allow you to plot multiple bars side-by-side, etc., which we will get into later. It’s OK if this isn’t 100% clear yet, just be aware that this is an option you can pursue if you want to deal with proportions rather than counts.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualizing Amounts and Proportions</span>"
    ]
  },
  {
    "objectID": "02_Amounts.html#some-additional-considerations-for-plotting-amounts-data",
    "href": "02_Amounts.html#some-additional-considerations-for-plotting-amounts-data",
    "title": "2  Visualizing Amounts and Proportions",
    "section": "Some additional considerations for plotting amounts data",
    "text": "Some additional considerations for plotting amounts data\n\nWhat to do when the data are already counted\nSometimes, the dataset you receive will not be individual records, but a table with counts. We can get an example of what this looks like by using the count function on our penguinData object:\n\npenguinCounts&lt;-count(penguinData,island)\npenguinCounts\n\n# A tibble: 3 × 2\n  island        n\n  &lt;fct&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n\n\nNow we have a two-column tibble: one column giving the island name, and another (n) giving the number of penguins recorded on that island. Compare this table to the bar charts we made above. The numbers indicated in each bar should be the same as those in the table. Let’s say someone gave us these numbers and asked us to make a bar plot out of them. We could try using the same code we’ve seen already, just swapping in the penguinCounts data:\n\nggplot(data=penguinCounts,mapping=aes(x=island)) + \n  geom_bar()\n\n\n\n\n\n\n\n\nWhat happened? The geom_bar function assumes that you want it to count the number of instances of each category in the variable mapped to x position. With our penguinCounts data, the island variable only has one instance of each island name.\nOne way to deal with this issue is to use a different geometry. The geom_col function will produce a bar plot, but one that accepts mapping for both the x-position (category) and the y-position (count).\n\nggplot(data=penguinCounts,mapping=aes(x=island,y=n)) + \n  geom_col()\n\n\n\n\n\n\n\n\nCompare this to our initial plot of the penguin counts by island, and you’ll find them to be the same, despite the difference in the way the data is stored.\n\n\nReordering the categories displayed\nRight now our plots are presenting the categories on the x-axis from left to right in alphabetical order. We might instead want to order them based on some other attribute of the data. To do this, it helps for R to know that the categorical variable isn’t just a set of random labels, but a factor: a fixed suite of categories used for meaningful grouping. We can see that we have two factors already in the 2007 Gapminder data we created, indicated under the heading by the label &lt;fctr&gt;:\n\ngm2007\n\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n\n\nFactors are unique data types, and require some particular consideration when using them. Another package in the tidyverse family, forcats, provides a suite of functions for making dealing with these easier. In this case, we can apply the fct_infreq function to the continent vector to order them based on their frequency in the data:\n\nggplot(data=gm2007,mapping=aes(x=fct_infreq(continent))) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe fct_infreq function takes the variable of interest (continent) and set the order of the plot based on the frequency with which it occurs in the dataset.\nWe won’t dive into dealing with factors too deeply here, but will come back to it from time to time. If you’d like to learn more about this now, I recommend this chapter in the Wickham et al. book.\n\n\nReorienting bar graphs\nOftentimes, our categorical labels at the bottom will overlap. We saw an extreme case of this when we tried to plot bars by country. If you have a milder case of this, it can often be advantageous to plot horizontally rather than vertically. We can do this by adding another layer with a function, coord_flip, related to the coordinate space in which the data are plotted:\n\nggplot(data=gm2007,mapping=aes(x=fct_infreq(continent))) +   \n  geom_bar() +   \n  coord_flip() \n\n\n\n\n\n\n\n\nLike the geometry, this coordinate layer is added using the + operator, and simply flips the x and y axes. Again, this is something we’ll come back to in a later lecture.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualizing Amounts and Proportions</span>"
    ]
  },
  {
    "objectID": "04_Distributions.html",
    "href": "04_Distributions.html",
    "title": "3  Visualizing distributions",
    "section": "",
    "text": "Histograms\nLet’s say that instead of categories, we wanted to look at the distribution of a set of numerical values. We’ve already explored these using histograms via the Base R hist function, and we can access histograms in ggplot2 by using the geom_histogram function:\nggplot(data=gm2007,aes(x=lifeExp)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nYou may have noted that we dropped the mapping= here. As long as you’re using aes, it’s not needed: R will assume that this applies to the mapping. You may have also noted there’s an error we get from running this command that relates to bin size. We can handle this with an argument, binwidth, to make it so each bar in the histogram represents a 1-year period:\nggplot(data=gm2007,aes(x=lifeExp)) +\n  geom_histogram(binwidth=1)\nOK, so this graph is showing us how life expectancy looks overall, and we can see some patterns: a number of countries have lower life expectancies (~40-65), while some are clustered more tightly between 70 and 82 years. What if we wanted to look at the breakdown by continent? We could try what we did with our bar plots and map this data on to the fill element:\nggplot(data=gm2007,aes(x=lifeExp,fill=continent)) +\n  geom_histogram(binwidth=1)\nNow we have a number of different histograms plotted one on top of the other. This indicates that there is different patterning depending on the continent, but given the amount of overlap between the histograms, it’s hard to make out the differences.\nAnother way to look at additional categorical variables is to do individual plots for each category and compare them side-by-side. We can achieve this using faceting, which will create dividual “facet” plots, each with it’s own label. This will involve adding another layer on to our ggplot call, and the function we’ll use here is facet_wrap:\nggplot(data=gm2007,aes(x=lifeExp)) +\n  geom_histogram(binwidth=1) +\n  facet_wrap(vars(continent))\nThe facet_wrap function takes a variable and creates a set of plots The vars function works a little like the aes function, in that it takes a variable and changes the plotting behavior accordingly. We’ll learn more about faceting going forward, in particular how to facet using more than one variable with facet_grid.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizing distributions</span>"
    ]
  },
  {
    "objectID": "04_Distributions.html#boxplots",
    "href": "04_Distributions.html#boxplots",
    "title": "3  Visualizing distributions",
    "section": "Boxplots",
    "text": "Boxplots\nAnother way we can show distributions across multiple categories is by using a box plot:\n\nggplot(data=gm2007,aes(x=continent,y=gdpPercap)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe box plot (or box-and-whisker plot) shows the distribution of values in terms of the interquartile range, where the box represents the space between the 25% and 75% and the whiskers represent the rest. These are useful when you want to compare distributions across multiple categories. For example:\n\nggplot(data=penguinData,aes(x=species,y=flipper_length_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nNote the error here: there are two instances where data are not available (NA), and R is letting you know it can’t plot these.\n\n\n\n\n\n\nTry it yourself!\n\n\n\nHopefully now you’re seeing how these ggplot2 functions work. Try the following:\n\nMake a histogram of penguin bill lengths\nMake a boxplot of life expectancy by continent",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizing distributions</span>"
    ]
  }
]